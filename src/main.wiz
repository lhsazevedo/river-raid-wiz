import "vcs";

bank rom @ 0xF000 : [constdata; 4096];
bank ram @ 0x80 : [vardata; 128];

in ram {

    // main game constants:

    let NUM_BLOCKS      = 6;
    // max. number of block on screen
    let SECTION_BLOCKS  = 16;
    // number of blocks/stage
    let BLOCK_PARTS     = 2;
    // each block has two parts
    let BLOCK_SIZE      = 32;
    // number of lines/block
    let NUM_LINES       = 160;
    // number of lines in main kernel
    let MAX_LEVEL       = 48;

    // number of difficulty levels
    let DIGIT_H         = 8;
    // height of the score digits
    let JET_Y           = 19;
    // fixed y-position for jet
    let MIN_MISSILE     = JET_Y - 6;
    // starting position of player missile
    let MAX_MISSILE     = NUM_LINES + 1;
    // y-speed of the jet missile
    let MISSILE_SPEED   = 6;
    // number of lines for road
    let ROAD_HEIGHT     = 13;
    // counter for scrolling into new game
    let INTRO_SCROLL    = 48;

    // first pattern id with data on different page
    let SWITCH_PAGE_ID  = 9;


    // One or two player game
    var gameVariation: u8;
    // Delay before gameVariation changes
    var gameDelay: u8;
    // Simple frame counter
    var frameCnt: u8;
    // 8 bit random number (used for: start of ship and helicopter, sound)
    var random: u8;
    // saved joystick value (?000rldu)
    var joystick: u8;
    // change colors in screensaver mode (0/$01..$ff)
    var SS_XOR: u8;
    // darker colors in screensaver mode ($ff/$f7)
    var SS_Mask: u8;
    // x-acceleration
    var dXSpeed: u8;
    // playfield pattern Id of the previous block
    var prevPF1PatId: u8;
    // io000000
    var PF_State: u8;
    // 0 = end of section
    var sectionEnd: u8;
    // offset into first displayed block
    var blockOffset: u8;
    // low value of blockOffset
    var posYLo: u8;
    // counter for bridge explosion
    var bridgeExplode: u8;

    // the next 36 bytes are used to save all variables for six blocks:
    //---------------------------------------
    // ..$93         flags for block definition
    var blockLst        @ 0x8E: [u8; NUM_BLOCKS];
    var blockLstEnd     @ &blockLst[NUM_BLOCKS - 1]: u8;
    //---------------------------------------
    // ..$99         coarse value for x-positioning of object
    var XPos1Lst        @ 0x94: [u8; NUM_BLOCKS];
    var XPos1LstEnd     @ &XPos1Lst[NUM_BLOCKS - 1]: u8;
    //---------------------------------------
    // ..$9F         bit 0..2 = NUSIZ1, bit 3 = REFP1, 4..7 = fine move
    var State1Lst       @ 0x9A: [u8; NUM_BLOCKS];
    var State1LstEnd    @ &State1Lst[NUM_BLOCKS - 1]: u8;
    //---------------------------------------
    //.. $A5         ids for object
    var Shape1IdLst     @ 0xA0: [u8; NUM_BLOCKS];
    var Shape1IdLstEnd  @ &Shape1IdLst[NUM_BLOCKS - 1]: u8;
    //---------------------------------------
    // ..$AB         low pointer for PF1 data
    var PF1Lst          @ 0xA6: [u8; NUM_BLOCKS];
    var PF1LstEnd       @ &PF1Lst[NUM_BLOCKS - 1]: u8;
    //---------------------------------------
    // ..$B1         low pointer for PF2 data
    var PF2Lst          @ 0xAC: [u8; NUM_BLOCKS];
    var PF2LstEnd       @ &PF2Lst[NUM_BLOCKS - 1]: u8;
    //---------------------------------------
    // end of block variables

    //---------------------------------------
    // end of block variables
    // y-position of player missile
    var missileY     @ 0xb2: u8;
    // x-position of player jet
    var playerX      @ 0xb3: u8;
    // x-speed of player jet
    var speedX       @ 0xb4: u8;
    // y-speed of play jet
    var speedY       @ 0xb5: u8;
    // 1/2 (used for bridge)
    var blockPart    @ 0xb6: u8;
    // high value of fuel (displayed)
    var fuelHi       @ 0xb7: u8;
    // low value of fuel
    var fuelLo       @ 0xb8: u8;
    // number of block in current section (16..1)
    var sectionBlock @ 0xb9: u8;
    // pointer to the shape for the player jet
    // u16 ..$BB
    var shapePtr0    @ 0xba: u8;
    // playfield pattern Id for the new generated block
    var PF1PatId     @ 0xbc: u8;
    //---------------------------------------

    var playerState  @ 0xbd: u8;
    var level        @ 0xbd: u8;
    var randomLoSave @ 0xbe: u8;
    var randomHiSave @ 0xbf: u8;
    var livesPtr     @ 0xc0: u8;

    var player2State @ 0xC2: u8; //           ; ..$C5
    // the high pointer is not saved here, because it's const
    var livesPtr2 @ 0xc5: u8; //
    //---------------------------------------
    // 0 = running; -1 = game over; 1..48 = scroll into game
    var gameMode @ 0xC6: u8;
    // u16 ..$C8
    var shapePtr1a @ 0xC7: u8;
    // u16 ..$CA
    var shapePtr1b @ 0xC9: u8;
    // u16 ..$CC
    var colorPtr @ 0xCB: u8;
    // 12 bytes for the score display of current player
    // u16 ..$D8
    var scorePtr1 @ 0xCD: u8;
    // u16 ..$DA
    var PF1Ptr @ 0xD9: u8;
    // u16 ..$DC
    var PF2Ptr @ 0xDB: u8;

    //---------------------------------------
    var scorePtr2   @ 0xdd: [u8; 12];          // ..$E7         12 bytes for the score display of other player
    // the constant hi-pointers are temporary used:
    // current block in kernel
    var blockNum    @ 0xde: u8;
    // flag for GRP0 (player jet) reflection
    var reflect0    @ 0xe0: u8;
    // index of enemy that was hit by missile
    var hitEnemyIdx @ 0xe2: u8;
    // jet crashed into playfield
    var PFCrashFlag @ 0xe4: u8;
    // ff means: missile enabled
    var missileFlag @ 0xe6: u8;
    //---------------------------------------

    // jet collided with enemy (id)
    var collidedEnemy   @ 0xE8: u8;
    // current number generator values
    var randomLo        @ 0xE9: u8;
    var randomHi        @ 0xEA: u8;
    // saved number generator values for current player
    var randomLoSave2   @ 0xEB: u8;
    var randomHiSave2   @ 0xEC: u8;
    var temp2           @ 0xED: u8;
    // bit 7 = 1: road in block
    var roadBlock       @ 0xed: u8;
    // color of river banks
    var PFcolor         @ 0xEE: [u8; 5];
    // define minimum width of valley in first levels (6/0)
    var valleyWidth     @ 0xee: u8;
    // YELLOW/BLACK
    var playerColor     @ 0xEF: u8;
    // GREY (const!)
    var stateBKColor    @ 0xF0: u8;
    // YELLOW+2 (const!)
    var statePFColor    @ 0xF1: u8;
    // main temporary variable
    var temp            @ 0xF2: u8;
    // difference between to PF pattern ids
    var diffPF          @ 0xf2: u8;
    // always zero!
    var zero1           @ 0xf3: u8;
    // 0/1
    var player          @ 0xF4: u8;
    // x-position of player missile
    var missileX        @ 0xF5: u8;
    var zero2           @ 0xF6: u8;

    // Screensaver delay
    var SS_Delay        @ 0xF7: u8;           
    //
    var sound0Id        @ 0xF8: u8;           
    var sound0Cnt       @ 0xF9: u8;
    // Bridge is exploding
    var bridgeSound     @ 0xFA: u8;           
    // Missile fired
    var missileSound    @ 0xFB: u8;           
    var temp3           @ 0xFC: u8;
    // Current displayed line of block in kernel
    var blockLine       @ &temp3: u8;         
    var maxId           @ &temp3: u8;
    var lineNum         @ 0xFD: u8; 
}

in rom {
    #[fallthrough]
    func start() {
        nointerrupt = true;
        decimal = false;
        x = 0;
    }

    #[fallthrough]
    func reset() {
        // Clear RAM
        a = 0;
        do {
            (0x00 as *u8)[x] = a;
            s = x;
            x++;
        } while !zero;

        // @TODO: setScorePtrs()
        ((0xff0c as *u8) as func)();

        a = >:&graphics.zero;
        x = 12 - 1;
        // @TODO: setScorePtr1()
        ((0xff1c as *u8) as func)();

        x = &colorPtr as u8 + 1 - &PF1Lst as u8;
        // @TODO: gameInit()
        ((0xfa8f as *u8) as func)();

        a = random;
        // @TODO: Fix Wiz bug "return label() if !zero" loses condition
        goto mainLoop if !zero;

        random++;
        livesPtr = a;

        a = <:&graphics.one;
        // @TODO: Can this be simplified?
        *((&scorePtr1 as u8 + 10) as *u8) = a;
    }

    func mainLoop() {
        // offset ball
        x = 4;
        a = fuelHi;
        a >>>= 3;
        carry = false;

        // Position ball for fuel display
        a +#= 69;
        // @TODO: setPosX()
        ((0xfaef as *u8) as func)();

        // *** Prepare everything for the main kernel: ***
        // Set all color registers (and NUSIZ1 = 0)
        x++;

        do {
            // @TODO: ColorTab
            a = (0xfff7 as *u8)[x];
            a ^= SS_XOR;
            a &= SS_Mask;
            PFcolor[x] = a;
            (&vcs.control.player2)[x] = a;
            x--;
        } while !negative;

        y = a;
        // @TODO: Can this be simplified?
        a = *((&scorePtr1 as u8 + 10) as *u8);

        if (a != <:&graphics.two) {
            a = vcs.io.port_b;
            a >>>= 1;
            if (carry) {
                a = player;
                if (!zero) {
                    playerColor = y;
                    vcs.color.player1 = y;
                }
            }
        }

        // Flicker background when bridge explodes:
        a = bridgeExplode;
        if (!zero) {
            bridgeExplode--;
            a >>>= 1;

            if (carry) {
                a = 0x42;
                a &= SS_Mask;
                vcs.color.bg = a;
            }
        }

        temp = ++x;
        vcs.control.player1 = x;
        y = playerX;
        a = reflect0;
        vcs.reflect.player1 = a;

        if (!zero) {
            y++;
        }

        a = y;
        // @TODO: setPosX;
        ((0xfaef as *u8) as func)();

        x++;
        vcs.control.playfield = x;
        vcs.vdelay.player2 = x;

        // Set size, reflect and postion for top enemy object;
        y = XPos1Lst[NUM_BLOCKS - 1];
        a = State1Lst[NUM_BLOCKS - 1];
        vcs.control.player2 = a;
        vcs.reflect.player2 = a;

        // @TODO: setPosX2();
        ((0xfaf2 as *u8) as func)();

        // x-position missile:
        x++;
        a = missileX;
        // @TODO: setPosX();
        ((0xfaef as *u8) as func)();
        // @TODO: DoHMove();
        ((0xffae as *u8) as func)();

        vcs.pattern.playfield1 = y;

        // Clear collsion variables:
        hitEnemyIdx = y;
        PFCrashFlag = y;
        missileFlag = y;
        collidedEnemy = y;

        // Set variables for top block:
        x = NUM_BLOCKS - 1;

        // @TODO: SetPFxPtr();
        ((0xfbd5 as *u8) as func)();

        a = blockOffset;
        if (a < 3) {
            x--;
        }

        blockNum = x;

        y = Shape1IdLst[x];
        // @TODO: shapePtr1aTab
        x = (0xffc8 as *u8)[y];
        shapePtr1a = x;
        // @TODO: shapePtr1bTab, Y
        x = (0xfbbb as *u8)[y];
        shapePtr1b = x;
        // @TODO: ColorPtrTab
        x = (0xff23 as *u8)[y];
        colorPtr = x;
        vcs.collision.clear = a;
        vcs.hmove.clear = a;

        // Clear all collison registers
        x = a;
        carry = true;
        a -#= 1;
        a &= 0x1f;
        blockLine = a;
        blockLine >>>= 1;
        
        // @CONTINUE
        if (a >= 26) {
            a -#= 22;
        } else {
            a = 0x69;
        }
        // Low ofset
        // else if (a >= 4) {
        //     a &= 0b01;
        //     a |= 0b10;
        // }

        y = a;
    }
}

in rom @ 0xfb00 {
    namespace graphics {
        const zero: [u8] = [
            0x3C, // |  XXXX  |
            0x66, // | XX  XX |
            0x66, // | XX  XX |
            0x66, // | XX  XX |
            0x66, // | XX  XX |
            0x66, // | XX  XX |
            0x66, // | XX  XX |
            0x3C, // |  XXXX  |
        ];

        const one: [u8] = [
            0x3C, // |  XXXX  |
            0x18, // |   XX   |
            0x18, // |   XX   |
            0x18, // |   XX   |
            0x18, // |   XX   |
            0x18, // |   XX   |
            0x38, // |  XXX   |
            0x18, // |   XX   |
        ];

        const two: [u8] = [
            0x7E, // | XXXXXX |
            0x60, // | XX     |
            0x60, // | XX     |
            0x3C, // |  XXXX  |
            0x06, // |     XX |
            0x06, // |     XX |
            0x46, // | X   XX |
            0x3C, // |  XXXX  |
        ];

        const three: [u8] = [
            0x3C, // |  XXXX  |
            0x46, // | X   XX |
            0x06, // |     XX |
            0x0C, // |    XX  |
            0x0C, // |    XX  |
            0x06, // |     XX |
            0x46, // | X   XX |
            0x3C, // |  XXXX  |
        ];

        const four: [u8] = [
            0x0C, // |    XX  |
            0x0C, // |    XX  |
            0x0C, // |    XX  |
            0x7E, // | XXXXXX |
            0x4C, // | X  XX  |
            0x2C, // |  X XX  |
            0x1C, // |   XXX  |
            0x0C, // |    XX  |
        ];

        const five: [u8] = [
            0x7C, // | XXXXX  |
            0x46, // | X   XX |
            0x06, // |     XX |
            0x06, // |     XX |
            0x7C, // | XXXXX  |
            0x60, // | XX     |
            0x60, // | XX     |
            0x7E, // | XXXXXX |
        ];

        const six: [u8] = [
            0x3C, // |  XXXX  |
            0x66, // | XX  XX |
            0x66, // | XX  XX |
            0x66, // | XX  XX |
            0x7C, // | XXXXX  |
            0x60, // | XX     |
            0x62, // | XX   X |
            0x3C, // |  XXXX  |
        ];

        const seven: [u8] = [
            0x18, // |   XX   |
            0x18, // |   XX   |
            0x18, // |   XX   |
            0x18, // |   XX   |
            0x0C, // |    XX  |
            0x06, // |     XX |
            0x42, // | X    X |
            0x7E, // | XXXXXX |
        ];

        const eight: [u8] = [
            0x3C, // |  XXXX  |
            0x66, // | XX  XX |
            0x66, // | XX  XX |
            0x3C, // |  XXXX  |
            0x3C, // |  XXXX  |
            0x66, // | XX  XX |
            0x66, // | XX  XX |
            0x3C, // |  XXXX  |
        ];

        const nine: [u8] = [
            0x3C, // |  XXXX  |
            0x46, // | X   XX |
            0x06, // |     XX |
            0x3E, // |  XXXXX |
            0x66, // | XX  XX |
            0x66, // | XX  XX |
            0x66, // | XX  XX |
            0x3C, // |  XXXX  |
        ];
    }
}
